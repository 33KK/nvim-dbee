name: Compile and Upload Binaries

on: [push, pull_request]

jobs:
  assemble-os-matrix:
    runs-on: ubuntu-latest
    name: Assemble Matrix
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20.x'
      - name: Create Matrix
        id: set-matrix
        run: |
          list="$(
            go tool dist list -json | \
            jq '[
                .[] |
                with_entries(select([.key] |
                inside(["GOOS", "GOARCH"]))) |
                .["os"] = .GOOS |
                .["arch"] = .GOARCH |
                del(.GOOS, .GOARCH)
              ]' | \
            tr -d "\n"
          )"
          echo "matrix={\"include\": $list }" >> "$GITHUB_OUTPUT"

  check-secrets:
    runs-on: ubuntu-latest
    name: Check Secrets
    steps:
      - name: Check for Secret Availability
        run: |
          [ "${{ secrets.BUCKET_REPOSITORY_TOKEN }}" != '' ] || (echo "no BUCKET_REPOSITORY_TOKEN secret"; exit 1)
          [ "${{ secrets.BUCKET_REPOSITORY_NAME }}" != '' ] || (echo "no BUCKET_REPOSITORY_NAME secret"; exit 1)
          [ "${{ secrets.BUCKET_REPOSITORY_OWNER }}" != '' ] || (echo "no BUCKET_REPOSITORY_OWNER secret"; exit 1)
          [ "${{ secrets.BUCKET_REPOSITORY_PUBLISH_USER }}" != '' ] || (echo "no BUCKET_REPOSITORY_PUBLISH_USER secret"; exit 1)

  go-test:
    runs-on: ubuntu-latest
    name: Go Test
    steps:
      - uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20.x'
      - name: Install dependencies
        run: go get .
        working-directory: dbee
      - name: Test
        run: go test ./...
        working-directory: dbee

  go-build:
    needs: [ assemble-os-matrix, go-test ]
    name: Go Build
    runs-on: ubuntu-latest
    continue-on-error: true
    outputs:
      success: ${{ steps.set-success.outputs.success }}
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.assemble-os-matrix.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20.x'
      - name: Install dependencies
        run: go get .
        working-directory: dbee
      - name: Build
        run: GOOS="${{ matrix.os }}" GOARCH="${{ matrix.arch }}" go build -o ../ci_tmp/dbee_${{ matrix.os }}_${{ matrix.arch }}
        working-directory: dbee
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dbee_${{ matrix.os }}_${{ matrix.arch }}
          path: ci_tmp/dbee_${{ matrix.os }}_${{ matrix.arch }}
      - name: Set Success Flag
        id: set-success
        run: echo "success=true" >> "$GITHUB_OUTPUT"

  upload-binaries:
    runs-on: ubuntu-latest
    name: Upload Binaries
    needs: [ go-build, check-secrets ]
    env:
      BUCKET_REPOSITORY_TOKEN: "${{ secrets.BUCKET_REPOSITORY_TOKEN }}"
      BUCKET_REPOSITORY_NAME: "${{ secrets.BUCKET_REPOSITORY_NAME }}"
      BUCKET_REPOSITORY_OWNER: "${{ secrets.BUCKET_REPOSITORY_OWNER }}"
      BUCKET_REPOSITORY_PUBLISH_USER: "${{ secrets.BUCKET_REPOSITORY_PUBLISH_USER }}"
    outputs:
      commit-hash: ${{ steps.publish-binaries.outputs.commit-hash }}
      binary-list: ${{ steps.parse-artifacts.outputs.binary-list }}
    steps:
      - name: Check Build Status
        # run if any one in the go-build matrix succeds
        if: ${{ ! contains(needs.go-build.outputs.success, 'true') }}
        run: |
          echo "No builds succeeded!"
          exit 1
      - name: Get Artifacts
        uses: actions/download-artifact@v3
        with:
          path: raw_artifacts
      - name: Parse Artifacts
        id: parse-artifacts
        run: |
          mkdir artifacts
          list=""
          for f in raw_artifacts/dbee_*/*; do
            mv "$f" artifacts/
            list="$list $(basename "$f")"
          done
          echo "binary-list=$list" >> "$GITHUB_OUTPUT"
      - name: Publish Binaries
        id: publish-binaries
        run: |
          echo "cloning bucket repository"
          git clone https://"$BUCKET_REPOSITORY_PUBLISH_USER":"$BUCKET_REPOSITORY_TOKEN"@github.com/"$BUCKET_REPOSITORY_OWNER"/"$BUCKET_REPOSITORY_NAME" bucket
          cd bucket
          git config user.name "Github Actions"
          git config user.email "actions@github.com"

          branch="run-${{ github.run_id }}"
          git checkout -b "$branch"

          echo "applying changes"
          mv ../artifacts .
          git add artifacts
          git commit -m "[actions] Upload binaries"

          echo "pushing to bucket repository"
          echo "commit-hash=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"
          git push -u origin "$branch"

  create-install-file:
    runs-on: ubuntu-latest
    name: Create Install File
    needs: [ upload-binaries, check-secrets ]
    env:
      MANIFEST_FILE: "lua/dbee/install/__manifest.lua"
      COMMIT_HASH: "${{ needs.upload-binaries.outputs.commit-hash }}"
      BINARY_LIST: "${{ needs.upload-binaries.outputs.binary-list }}"
      BUCKET_REPOSITORY_NAME: "${{ secrets.BUCKET_REPOSITORY_NAME }}"
      BUCKET_REPOSITORY_OWNER: "${{ secrets.BUCKET_REPOSITORY_OWNER }}"
    steps:
      - uses: actions/checkout@v3
      - name: Create Install File from Artifacts
        run: |
          {
            echo "-- This file is automatically generated using CI pipeline"
            echo "-- DO NOT EDIT!"
            echo "local M = {}"
            echo
            echo "-- Links to binary releases"
            echo "M.urls = {"
            for bin in $BINARY_LIST; do
              echo "  $bin = \"https://github.com/$BUCKET_REPOSITORY_OWNER/$BUCKET_REPOSITORY_NAME/raw/$COMMIT_HASH/artifacts/$bin\","
            done
            echo "}"
            echo
            echo "-- Current version of go main package"
            echo "M.version = \"$(git rev-parse HEAD)\""
            echo
            echo "return M"
          } > "$MANIFEST_FILE"
      - name: Commit the Generated File
        uses: EndBug/add-and-commit@v9
        with:
          add: "${{ env.MANIFEST_FILE }}"
          author_name: Github Actions
          author_email: actions@github.com
          message: "[install] Update ${{ env.MANIFEST_FILE }}"
          pull: --rebase --autostash
