dbee.txt                                              Database Client for NeoVim


================================================================================
CONTENTS                                                           *dbee-contents*

1. Neovim DBee..................................................|dbee-neovim_dbee|
    1.1. Installation..........................................|dbee-installation|
        1.1.1. Platform Support............................|dbee-platform_support|
        1.1.2. Manual Binary Installation........|dbee-manual_binary_installation|
    1.2. Usage........................................................|dbee-usage|
        1.2.1. Specifying Connections................|dbee-specifying_connections|
            1.2.1.1. Secrets........................................|dbee-secrets|
    1.3. Configuration........................................|dbee-configuration|
    1.4. Projector Integration........................|dbee-projector_integration|
    1.5. Development............................................|dbee-development|
2. DBee Architecture Overview....................|dbee-dbee_architecture_overview|
    2.1. Lua Architecture..................................|dbee-lua_architecture|
    2.2. Go Architecture....................................|dbee-go_architecture|

================================================================================
NEOVIM DBEE                                                     *dbee-neovim_dbee*

Database Client for NeoVim!

Execute Your Favourite Queries From the Comfort of Your Editor!

Backend in Go!

Frontend in Lua!

Get Results FAST With Under-the-hood Iterator!

Integrates with nvim-projector!

Bees Love It!

Alpha Software - Expect Breaking Changes!

--------------------------------------------------------------------------------
INSTALLATION                                                   *dbee-installation*

*   packer.nvim:
>
        use {
        "kndndrj/nvim-dbee",
        requires = {
          "MunifTanjim/nui.nvim",
        },
        run = function()
          -- Install tries to automatically detect the install method.
          -- if it fails, try calling it with one of these parameters:
          --    "curl", "wget", "bitsadmin", "go"
          require("dbee").install()
        end,
        config = function()
          require("dbee").setup(--[[optional config]])
        end
        }
<
*   lazy.nvim:
>
        {
        "kndndrj/nvim-dbee",
        dependencies = {
          "MunifTanjim/nui.nvim",
        },
        build = function()
          -- Install tries to automatically detect the install method.
          -- if it fails, try calling it with one of these parameters:
          --    "curl", "wget", "bitsadmin", "go"
          require("dbee").install()
        end,
        config = function()
          require("dbee").setup(--[[optional config]])
        end,
        },
<

PLATFORM SUPPORT                                           *dbee-platform_support*

This project aims to be as cross-platform as possible, but there are some
limitations (for example some of the go dependencies only work on certain
platforms).

The CI pipeline tries building the binary for all possible GOARCH/GOOS
combinations - the ones that succeed are stored in a
remote bucket (https://github.com/kndndrj/nvim-dbee-bucket) on it's own branch.
Additionally, the install manifest (lua/dbee/install/__manifest.lua) gets
created.

So to check if your platform is currently supported, check out the mentioned
manifest

MANUAL BINARY INSTALLATION                       *dbee-manual_binary_installation*

The installation examples include the `build`/`run` functions, which get
triggered once the plugin updates. This should be sufficient for the majority of
users. If that doesn't include you, then you have a few options:

*   just install with the `"go"` option (this performs `go install` under the
    hood):
>
        require("dbee").install("go")
<
*   Download an already compiled binary from one of urls in the
    install manifest (lua/dbee/install/__manifest.lua)
*   `go install` (the install location will vary depending on your local go
    configuration):
>
        go install github.com/kndndrj/nvim-dbee/dbee@<version>
<
*   Clone and build
>
        # Clone the repository and cd into the "go subfolder"
        git clone <this_repo>
        cd <this_repo>/dbee
        # Build the binary (optional output path)
        go build [-o ~/.local/share/nvim/dbee/bin/dbee]
<

--------------------------------------------------------------------------------
USAGE                                                                 *dbee-usage*

Call the `setup()` function with an optional config parameter. If you are not
using your plugin manager to lazy load for you, make sure to specify
`{ lazy = true }` in the config.

Here is a brief refference of the most useful functions:
>
    -- Open/close the UI.
    require("dbee").open()
    require("dbee").close()
    -- Next/previou page of the results (there are the same mappings that work just inside the results buffer
    -- available in config).
    require("dbee").next()
    require("dbee").prev()
    -- Run a query on the active connection directly.
    require("dbee").execute(query)
    -- Save the current result to file (format is either "csv" or "json" for now).
    require("dbee").save(format, file)
<

SPECIFYING CONNECTIONS                               *dbee-specifying_connections*

Connection represents an instance of the database client (i.e. one database).
This is how it looks like:
>
    {
      id = "optional_identifier" -- useful to set manually if you want to remove from the file (see below)
                                 -- IT'S YOUR JOB TO KEEP THESE UNIQUE!
      name = "My Database",
      type = "sqlite", -- type of database driver
      url = "~/path/to/mydb.db",
    }
<

There are a few different ways you can use to specify the connection parameters
for DBee:

*   Using the `setup()` function:

The most straightforward (but probably the most useless) way is to just add
  them to your configuration in `init.lua` like this:
>
      require("dbee").setup {
      connections = {
        {
          name = "My Database",
          type = "sqlite", -- type of database driver
          url = "~/path/to/mydb.db",
        },
        -- ...
      },
      -- ... the rest of your config
      }
<

*   Use the prompt at runtime:

You can add connections manually using the "add connection" item in the
  drawer. Fill in the values and write the buffer (`:w`) to save the connection.
  By default, this will save the connection to the global connections file and
  will persist over restarts.

*   Use an env variable. This variable is `DBEE_CONNECTIONS` by default:

You can export an environment variable with connections from your shell like
  this:
>
        export DBEE_CONNECTIONS='[
            {
                "name": "DB from env",
                "url": "mysql://...",
                "type": "mysql"
            }
        ]'
<

*   Use a custom load function:

If you aren't satisfied with the default capabilities, you can provide your
  own `load` function in the config at setup. This example uses a
  project-specific connections config file:
>
      local file = vim.fn.getcwd() .. "/.dbee.json"
      require("dbee").setup {
        loader = {
          -- this function must return a list of connections and it doesn't
          -- care about anything else
          load = function()
            return require("dbee.loader").load_from_file(file)
          end,
          -- just as an example you can also specify this function to save any
          -- connections from the prompt input to the same file as they are being loaded from
          add = function(connections)
            require("dbee.loader").add_to_file(file)
          end,
          -- and this to remove them
          remove = function(connections)
            require("dbee.loader").remove_from_file(file)
          end,
        },
        -- ... the rest of your config
      }
<

SECRETS                                                             *dbee-secrets*

If you don't want to have secrets laying around your disk in plain text, you can
use the special placeholders in connection strings (this works using any method
for specifying connections).

NOTE: Currently only envirnoment variables are supported

Example:

Using the `DBEE_CONNECTIONS` environment variable for specifying connections and
exporting secrets to environment:
>
    # Define connections
    export DBEE_CONNECTIONS='[
        {
            "name": "{{ env.SECRET_DB_NAME }}",
            "url": "postgres://{{ env.SECRET_DB_USER }}:{{ env.SECRET_DB_PASS }}@localhost:5432/{{ env.SECRET_DB_NAME }}?sslmode=disable",
            "type": "postgres"
        }
    ]'
    # Export secrets
    export SECRET_DB_NAME="secretdb"
    export SECRET_DB_USER="secretuser"
    export SECRET_DB_PASS="secretpass"
<

If you start neovim in the same shell, this will evaluate to the following
connection:
>
    { {
      name = "secretdb",
      url = "postgres://secretuser:secretpass@localhost:5432/secretdb?sslmode=disable",
      type = "postgres",
    } }
<

--------------------------------------------------------------------------------
CONFIGURATION                                                 *dbee-configuration*

As mentioned, you can pass an optional table parameter to `setup()` function.

Here are the defaults:
>
    M.default = {
      -- lazy load the plugin or not?
      lazy = false,
      -- list of manually specified connections
      connections = {
        -- example:
        -- {
        --   name = "example-pg",
        --   type = "postgres",
        --   url = "postgres://user:password@localhost:5432/db?sslmode=disable",
        -- },
      },
      -- load/save functionality for connectoins
      -- you can use helper function from require("dbee.loader")
      -- or come up with something completly different
      loader = {
        -- you can control what happens with this function,
        -- when the application wants to save connections - for example from "Add Connection" prompt
        -- recieves a list of connections
        add = function(connections)
          -- append to default file
          require("dbee.loader").add_to_file(connections)
        end,
        -- you can control what happens with this function,
        -- when the application wants to remove connections - for example from drawer action
        -- recieves a list of connections
        remove = function(connections)
          -- remove from default file
          require("dbee.loader").remove_from_file(connections)
        end,
        -- use this function to provide different connections from files, env...
        -- must return a list of connections
        load = function()
          -- load from default env var and file
          local file_conns = require("dbee.loader").load_from_file()
          local env_conns = require("dbee.loader").load_from_env()
          return vim.list_extend(file_conns, env_conns)
        end,
      },
      -- extra table helpers per connection type
      extra_helpers = {
        -- example:
        -- ["postgres"] = {
        --   ["List All"] = "select * from {table}",
        -- },
      },
      -- drawer window config
      drawer = {
        -- command that opens the window if the window is closed
        -- string or function
        window_command = "to 40vsplit",
        -- mappings for the buffer
        mappings = {
          -- manually refresh drawer
          refresh = { key = "r", mode = "n" },
          -- actions perform different stuff depending on the node:
          -- action_1 opens a scratchpad or executes a helper
          action_1 = { key = "<CR>", mode = "n" },
          -- action_2 renames a scratchpad or sets the connection as active manually
          action_2 = { key = "da", mode = "n" },
          -- action_3 deletes a scratchpad or connection (removes connection from the file if you configured it like so)
          action_3 = { key = "dd", mode = "n" },
          -- these are self-explanatory:
          collapse = { key = "c", mode = "n" },
          expand = { key = "e", mode = "n" },
          toggle = { key = "o", mode = "n" },
        },
        -- icon settings:
        disable_icons = false,
        icons = {
          -- these are what's available for now:
          history = {
            icon = "",
            highlight = "Constant",
          },
          scratch = {
            icon = "",
            highlight = "Character",
          },
          database = {
            icon = "",
            highlight = "SpecialChar",
          },
          table = {
            icon = "",
            highlight = "Conditional",
          },
          add = {
            icon = "",
            highlight = "String",
          },
          remove = {
            icon = "󰆴",
            highlight = "SpellBad",
          },
          help = {
            icon = "󰋖",
            highlight = "NormalFloat",
          },
          -- if there is no type
          -- use this for normal nodes...
          none = {
            icon = " ",
          },
          -- ...and use this for nodes with children
          none_dir = {
            icon = "",
            highlight = "NonText",
          },
          -- chevron icons for expanded/closed nodes
          node_expanded = {
            icon = "",
            highlight = "NonText",
          },
          node_closed = {
            icon = "",
            highlight = "NonText",
          },
        },
      },
      -- results window config
      result = {
        -- command that opens the window if the window is closed
        -- string or function
        window_command = "bo 15split",
        -- number of rows per page
        page_size = 100,
        -- mappings for the buffer
        mappings = {
          -- next/previous page
          page_next = { key = "L", mode = "" },
          page_prev = { key = "H", mode = "" },
        },
      },
      -- editor window config
      editor = {
        -- command that opens the window if the window is closed
        -- string or function
        window_command = function()
          vim.cmd("new")
          vim.cmd("only")
          m.tmp_buf = vim.api.nvim_get_current_buf()
          return vim.api.nvim_get_current_win()
        end,
        -- mappings for the buffer
        mappings = {
          -- run what's currently selected on the active connection
          run_selection = { key = "BB", mode = "v" },
          -- run the whole file on the active connection
          run_file = { key = "BB", mode = "n" },
        },
      },
      -- general UI config
      -- Default configuration uses a "layout" helper to save the existing ui before opening any windows,
      -- then makes a new empty window for the editor and then opens result and drawer.
      -- When later calling dbee.close(), the previously saved layout is restored.
      -- NOTE: "m" is just a global object - nothing special about it - you might as well just use global vars.
      --
      -- You can probably do anything you imagine with this - for example all floating windows, tiled/floating mix etc.
      ui = {
        -- how to open windows in order (with specified "window_command"s -- see above)
        window_open_order = { "editor", "result", "drawer" },
        -- hooks before/after dbee.open()/.close()
        pre_open_hook = function()
          -- save layout before opening ui
          m.egg = layout.save()
        end,
        post_open_hook = function()
          -- delete temporary editor buffer
          vim.cmd("bd " .. m.tmp_buf)
        end,
        pre_close_hook = function() end,
        post_close_hook = function()
          layout.restore(m.egg)
          m.egg = nil
        end,
      },
    }
<

--------------------------------------------------------------------------------
PROJECTOR INTEGRATION                                 *dbee-projector_integration*

DBee is compatible with my other plugin
nvim-projector (https://github.com/kndndrj/nvim-projector), a
code-runner/project-configurator.

To use dbee with it, simply use `"dbee"` as one of it's outputs.

--------------------------------------------------------------------------------
DEVELOPMENT                                                     *dbee-development*

Reffer to ARCHITECTURE.md (ARCHITECTURE.md) for a brief overview of the
architecture.

================================================================================
DBEE ARCHITECTURE OVERVIEW                       *dbee-dbee_architecture_overview*

The plugin is created from 2 parts:

*   Lua frontend
*   Go backend

These two parts should have clearly defined borders and not "leak"
responsibilities.

--------------------------------------------------------------------------------
LUA ARCHITECTURE                                           *dbee-lua_architecture*
>
                             │                                           ┌─────────────┐             ┌─────────┐
                             │    "dbee"            ┌────────────────────►             ├─────────────►         │
                             │                      │                    │   handler   │   mapping   │   Go    │
                             │                      │                 ┌──►             ├─────────────►         │
                             │                      │                 │  └─────────────┘             └─────────┘
                             │      ┌────────────┐  │                 │
                             │      │            │  │                 │
    ┌───────────────┐        │      │   drawer   ├──┤                 │
    │               │        │      │            │  │                 │
    │   projector   │        │      └────────────┘  │  ┌────────────┐ │
    │   extension   ├────────►                      │  │            │ │
    │               │        │                      └──►   editor   ├─┘
    └───────────────┘        │                         │            │
                             │                         └────────────┘
                             │
                             │
                             │
                             │      ┌─────────────┐
                             │      │             │
                             │      │   install   │
                             │      │             │
                             │      └─────────────┘
                             │
<

Description:

*   The "dbee" package consists of 3 major functional packages, 1 install package
    and additional "helper" packages.
*   `install` package is independent of the other packages and is used for
    installation of the compiled go binary using the manifest generated by the CI
    pipeline.
*   `drawer` is the "tree" view in UI - it consumes the editor (to provide
    scratchpad view and to manage scratchpads) and the handler (for managing
    connections and providing layout of each database).
*   `editor` is the "scratchpad" window in the UI and is used for managing
    scratchpads. It also consumes the handler in order to execute selected
    queries.
*   `handler` is a mapping to Go backend - it holds all connections (a connection
    is an instance of the database) and manages them all calls to backend go
    through here. Handler also manages the "results" window in UI. handler is also
    responsible for providing layouts of databases to drawer.
*   `projector extension` acts as an outside "client" and registers dbee as an
    output for nvim-projector.

--------------------------------------------------------------------------------
GO ARCHITECTURE                                             *dbee-go_architecture*

As We said, the Go backend is accessed exclusively through `handler` in lua. The
handler reads configurations for databases, remembers them and registers them in
the backend as well. This way, both `handler` and go's `main()` function have
knowledge of active connections.

When a handler wants to perform an action on a specific connection, it sends the
connection's id in the request to go.
>
                                │
                                │    "main.go"
                                │
                                │    ┌──────────────────────────────┐
                                │    │ map of                       │
                                │    │ connections                  │             ┌──────┐
                                │    │                              │             │┼┼┼┼┼┼│
                                │    │ ┌──────────────────────────┐ │             └──────┤
                                │    │ │ postgres_xyz             │ │    ┌────────►  DB  │
                                │    │ │                          │ │    │        ┌──────┤
                                │    │ │  ┌─────────────────────┐ │ │    │        │┼┼┼┼┼┼│
                                │    │ │  │clients (postgres)   ├────────┘        └──────┘
                                │    │ │  └────────┬────────────┘ │ │
                                │    │ │           │              │ │
                                │    │ │         iter     ┌─ ── ── ── ── ── ─iter ── ── ── ── ── ── ──
                                │    │ │           │      │       │ │                                 │
                                │    │ │ ┌─────────▼──────▼─────┐ │ │
                                │    │ │ │cache                 │ │ │                                 │
                                │    │ │ │                      │ │ │                ┌─────────────┐
                                │    │ │ │ - read first page ──────────────buffer────►             │  │
    ┌─────────────────┐         │    │ │ │ - read rest in bg    │ │ │                │             │
    │                 │         │    │ │ │                   ┌─────────────json──────►             │  │
    │   handler.lua   ├─────────►    │ │ │                   │  │ │ │                │   outputs   │
    │                 │         │    │ │ │ - idle ...  ──────┼─────────────csv───────►             │  │
    └─────────────────┘         │    │ │ │                   │  │ │ │                │             │
                                │    │ │ │                   └─────────────buffer────►             │  │
                                │    │ │ │                      │ │ │                └─────────────┘
                                │    │ │ │                      │ │ │                                 │
                                │    │ │ │                      │ │ │                ┌─────────────┐
                                │    │ │ │  - flush ─────────────────────────────────►   history   ├ ─┘
                                │    │ │ │                      │ │ │                │   output    │
                                │    │ │ └──────────────────────┘ │ │                └─────────────┘
                                │    │ │                          │ │
                                │    │ └──────────────────────────┘ │
                                │    │                              │
                                │    │ ┌──────────────────────────┐ │
                                │    │ │ sqlite_123               │ │
                                │    │ │  ┌────────────────┐      │ │
                                │    │ │  │clients (sqlite)│      │ │
                                │    │ │  └────────────────┘      │ │
                                │    │ │                          │ │
                                │    │ └──────────────────────────┘ │
                                │    │                              │
                                │    │            ...               │
                                │    │                              │
                                │    └──────────────────────────────┘
                                │
<

Now that we have a map of connections, we can focus on how each connection is
structured:

There are 2 primarily used result types in the connection:

*   `IterResult` - result in a form of an iterator returned by the specific
    driver.
*   `Result` - full in-memory result set, which is sent in full or in chunks to
    outputs.

Each connection has a specific driver implementation (`clients`) which are
required to implement "query" functionality and return an `IterResult` which is
an iterator over the results returned from the database.

Then the client's internal `cache` reads the ammount of results required for the
first page (specified as a parameter) in the main thread and it immediately
sends it (drained first page `Result`) to the specified output (`buffer`) - this
makes an impression that results are available right away.

As soon as the first page is read, a background process is spawned which drains
the remaining results to connections's internal cache.

When the iterator is drained and all results are in cache, we can do a few
things with it:

*   send a chunk of `Result` to an output (e.g. page of the result) - usually used
    by `buffer` output
*   send a full `Result` to an output - useful for "saving" (e.g. json or csv
    output)

When a user makes a new request to the client (executes a query), the in-memory
`Result` is flushed to history output, which saves it on disk for possible
latter consumption.

Note: `buffer`, `json` and `csv` all implement the same `Output` interface and
could be used interchangably. Simillarly, `clients` and `history` implement the
same `Input` interface.

